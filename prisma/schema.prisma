datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["aggregateApi"]
}

model User {
    id Int @id @default(autoincrement())
    email String @unique
    firstName String
    lastName String
    social Json
    //Relation fileds
    courses CourseEnrollment[]
    testResults TestResult[] @relation(name: "results")
    testGraded TestResult[] @relation(name: "graded")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Course {
    id Int @id @default(autoincrement())
    name String
    courseDetails String
    //Relation fileds
    members CourseEnrollment[]
    tests Test[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CourseEnrollment {
    role UserRole
    //Relation fileds
    userId Int
    courseId Int
    user User @relation(fields: [userId], references: [id])
    course Course @relation(fields: [courseId], references: [id])
    createdAt DateTime @default(now())
    @@id([userId, courseId, role])
}

model Test {
    id Int @id @default(autoincrement())
    name String
    date DateTime
    //Relation fileds
    courseId Int
    course Course @relation(fields: [courseId], references: [id])
    testResults TestResult[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TestResult {
    id Int @id @default(autoincrement())
    result Int
    //Relation fileds
    testId Int
    test Test @relation(fields: [testId], references: [id])
    studentId Int
    student User @relation(name: "results", fields: [studentId], references: [id])
    gradedId Int
    gradedBy User @relation(name: "graded", fields: [gradedId], references: [id])
    createdAt DateTime @default(now())
}

enum UserRole {
    STUDENT
    TEACHER
}
